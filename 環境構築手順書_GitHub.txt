//-------------------------------------------------------------------------------
//■ドキュメント概要
//-------------------------------------------------------------------------------
GitHubを使った開発環境の導入手順書です。
Gitクライアントには日本語版が無償公開中の「SourceTree for Windows」を使います。

//-------------------------------------------------------------------------------
//■「GitHub（ギットハブ）」
//-------------------------------------------------------------------------------
	ソフトウェア開発プロジェクトのための共有ウェブサービスで、Gitバージョン管理システムを使用する。 
	PCにインストールしたバージョン管理ツール（Gitクライアント）を、ネットワーク連動させるサービスと思えばいい。
	有償プランにするとプロジェクトを非公開にできるが、支払いがドルなので少々心理的ハードルはある。

	同様のサービスとして「Google Code」や「Bitbucket」も存在する。
	そちらの資料も別途用意する。

	○Bitbucket
		「https://bitbucket.org/」
		無償だと5人までのユーザー制限がある。
		ただ、無償でも非公開利用が可能なので内容によってはこちらを使ったほうがいいはず。
		サイトは日本語対応ありのようで評判もいい。情報も豊富な印象だった。
		「SourceTree for Windows」をそのまま使えます。
		※日本語対応はどうにか一部のみが対応している程度だった。使い方はGitHubとあまり変わらない。

	○Google Code
		「http://code.google.com/」
		日本語も利用できるはずなのにいきなり英語が表示される。少なくともIEではそうなる。
		Google Chrome推奨だろうか？ 調査の必要あり。
		Androidのアプリ開発やAndroid端末との連携に有利なところがあれば一考に値するかも。

//-------------------------------------------------------------------------------
//■GitHubにユーザー登録する
//-------------------------------------------------------------------------------
	1) GitHubのウェブサイト「https://github.com/」にアクセスする。
	2) 名前/メールアドレス/パスワードを入力して「Sign up for free」をクリックする。
	3) サービスプランの選択画面で「Free」を選択、「Finish sign up」をクリックする。
	4) 登録したアドレスにメールが届くのでリンクをクリックする。 ※送信元は<noreply@github.com>※
	5) リンク先で「Confirm（確認）」をクリックする

	登録そのものは以上で終了ですが、実際の運用にはもう少々手順がかかります。

//-------------------------------------------------------------------------------
//■GitHubでリポジトリの雛型を作成する
//-------------------------------------------------------------------------------
	1) GitHubのサービスにログインして、ユーザーのトップページを表示させる。
	2) ページの一番上（検索ボックスがある行）の右側に「+▼」のアイコンがあるのでクリックする。
	3) 表示された選択肢から"New repository"を選択する。
	4) リポジトリ設定の入力画面になるので、入力完了後に「Create repository」ボタンをクリックする。

	○リポジトリ作成時の各入力項目について
	「Repository name」
		リポジトリの名称を入力します。プロジェクト名だと思えばいい。
		PS側のフォルダ名/ファイル名の制限を気にしつつ、英数と記号のみを使ったほうがいいと思います。

	「Description」
		リポジトリの説明を入力します。
		わかりやすく日本語を使いたい場合、「Repository name」ではなくこの項目で使うべきでしょう。

	「Public or Private」
		リポジトリを誰でも閲覧可能にするかどうか、を設定するラジオボタンです。
		無償のサービスプランではPublic（公開）しか選べません。
		Publicの場合、守秘義務や著作権などにより一層の注意を払いながらサービスを利用すべきです。

	「Initialize this repository with a README」
		このチェックボックスにチェックを入れておくと、README.mdが入った状態でリポジトリを作成してくれます。
		まずは試しに使ってみたい、という場合は、チェックを入れたほうが取っ付きやすくなります。

	※拡張子「.md」のファイルはHTML上で公開することを視野に入れた特殊な形式です。
	※必要がなければ通常のテキストファイルに置き換えても問題はないかと思います。

//-------------------------------------------------------------------------------
//■「SourceTree for Windows」のインストール
//-------------------------------------------------------------------------------
	1) 「http://sourcetreeapp.com/」にアクセスして、インストーラをダウンロードする
	2) インストール中、いくつかYes/Noを選択することになりますが、すべてデフォルトになるように選べば問題ありません。

	※先にGitHubのユーザー登録を終え、テスト用のリポジトリをひとつ作ってからインストールするほうが取っ付きやすいです。

//-------------------------------------------------------------------------------
//■「SourceTree for Windows」でローカルにリポジトリを作成する
//-------------------------------------------------------------------------------
	1) 「新規/クローンを作成する」をクリックする。
	2) 「リポジトリをクローン」のタブを選択して必要な項目を入力する。
	3) 必要項目の入力後、タブ右下にある「クローン」をクリックする。

	○「リポジトリをクローン」のタブの各入力項目について
	「元のパス/URL」
		複製対象となるリポジトリの場所を入力します。GitHub上にあるリポジトリのURLを入力します。
		リポジトリのURLを調べるには、まずユーザーのトップページから対象リポジトリのリンクをクリックします。
		ページが切り換わると、画面の右下に「HTTPS clone URL」という項目があります。
		上記項目のテキストボックス内に記述されている「https://」から始まるURLが、リポジトリのURLです。
		※SourceTreeは「Bitbucket」など他のサービスにも対応しているようですが、ここではGitHubに限定しています。

	「保存先のパス」
		ローカルリポジトリを作成する場所を入力します。
		基本的には、開発環境で使っているワークスペースを直接指定するのが正しいかと思います。
		ただ、共有環境に慣れるまではローカルのワークスペースとリポジトリ管理のフォルダを念のため別する方法もあります。
		プロジェクトの規模や自分の管理能力と相談して、適切に調整してください。
		※特に無償の公開プランを利用している場合は、情報セキュリティの観点でいくら気をつけてもいいはずです。

	「ブックマーク名」
		SourceTree上に表示されるリポジトリ名称を入力します。

	例)
	「元のパス/URL」	https://github.com/User00/Sample.git
	「保存先のパス」	C:\Users\User00\Documents\Sample
	「ブックマーク名」	SampleProject

	○認証設定について
		SourceTreeは認証情報を「グローバル」と「リポジトリごと」に設定できます。
		全リポジトリで共通したユーザー名とメールアドレスを使っているならグローバル設定だけでOKです。
		リポジトリごとに異なるサイトを使っている、等といった場合はリポジトリごとに設定します。

		グローバル設定	:「ツール＞オプション＞全般」
		リポジトリ個別	:対象リポジトリ選択状態から「リポジトリ＞リポジトリ設定＞詳細」

		※単純な話だが、初期状態だとここが未設定になっており、クローン作成後の操作が絶対にエラーになる。
		※詳細ログを読めば予測できなくはないが、初心者はしばらく引っかかる。というか引っかかった。
		※クローン作成時に入力を促されるのは、あくまでサイトのログイン情報であるようだ。

//-------------------------------------------------------------------------------
//■「SourceTree for Windows」の環境で、ファイルを追加/編集/コミットする
//-------------------------------------------------------------------------------
	1) ローカルリポジトリを作成した場所にファイルを新規作成する。※ここでは「readme.txt」を例とする※
	2) SourceTreeで対象のリポジトリを選択する。
	3) 「ファイルステータス＞作業コピー」の欄を選択すると、更新ファイル一覧に「readme.txt」が追加されている。
	4) 修正をコミットしたいファイル（ここではreadme.txt）にチェックを入れる。
	5) 対象ファイルが「ステージしたファイル」の一覧に移動する。※この作業は「ステージング」等と呼ばれるようだ。
	6) SourceTreeのツールバーにある「コミット」のアイコンをクリックする。
	7) コミットメッセージの入力欄が表示されるので、コメントを入力する。
	8) 画面右下の「コミット」ボタンをクリックする。ここでローカルリポジトリに修正が反映される。

	※この手順だけではローカルリポジトリが更新されるだけで、GitHubに反映するにはもう少々手順がある。
	※ただ、コミットの際に「変更を*****にすぐにプッシュする」にチェックを入れるとGitHubへ即反映される。
	※上記の機能は便利でもあるが危険でもあるように思われる。

	○指定のファイル/フォルダをコミットの対象外から除外する
		ビルド時に生成される一時ファイルなどをコミット対象から除外するには下記の操作を行います。

	1) コミット手順3、4の「ステージング」作業の際、除外したいファイルを選んで、マウスを右クリックする。
	2) 表示されたメニューから「無視」を選択する。
	3) 指定フォルダすべて、指定拡張子すべて等、無視のルールを選択する。
	4) ローカルリポジトリのフォルダに「.ignore」ファイルが生成されて、以降はそのルールが適用されます。

		手順は以上です。無視すべきファイルは開発環境により異なります。
		GitHubで開発環境ごとの推奨無視設定が公開されていますので、そこを参照するといいかと思います。

		推奨設定の公開URL「https://github.com/github/gitignore」

		ただ、ignoreファイルの記述方法は使用するGitクライアントにより異なる場合があるようです。
		※実際の話、SourceTreeでもわずかに異なるようでした。
		ですので、サイトの情報を参考にしながらツール上で設定するのがいいかと思います。

//-------------------------------------------------------------------------------
//■「SourceTree for Windows」から「GitHub」のリモートリポジトリを操作する
//-------------------------------------------------------------------------------
	基本的な操作はふたつ「プル」と「プッシュ」です。
	
	「プル」
		GitHubのリポジトリ（リモートリポジトリ）の内容をローカルリポジトリに反映させます。
		ダウンロードと思えばわかりやすい。

	「プッシュ」
		ローカルリポジトリの内容をリモートリポジトリに反映させます。
		アップロードと思えばわかりやすい。

//-------------------------------------------------------------------------------
//■「GitHub」のリモートリポジトリを削除する
//-------------------------------------------------------------------------------
	始めはよく間違ったりするかと思います。
	練習用のリポジトリを消すのに使ってください。


	1) リポジトリを選択する。
	2) リポジトリ画面の右側にある「Settings」をクリックする。※ツールバーのユーザーセッティングとは別です。
	3) 画面の一番下にある「Danger Zone」の中に、「Delete this repository」がある。
	4) 実行すると、リポジトリ名の入力を求められる。
	5) リポジトリ名を入力して実行すれば削除される。

//-------------------------------------------------------------------------------
//■そもそもコミットってなに？
//-------------------------------------------------------------------------------
	データベース関連の用語で、すべて正常に完結したという宣言である、そうです。
	Git/GitHubを利用する限りにおいては「修正の反映」くらいの意味で使ってしまってよさそうですが。

//-------------------------------------------------------------------------------
//■秘密鍵と公開鍵を作成する
//-------------------------------------------------------------------------------
	1) SourceTreeの「ツール」-「SSH キーの作成/インポート」をクリックする。
	2) PuTTY Key Generatorが起動するので、「Generate」ボタンをクリックする。
	3) プログレスバーの下の空白でマウスカーソルを動かす。※これにより乱数が生成されるらしい
	4) キーの作成が完了後、「Public key for pasting into OpenSSH authorized_keys file」の下に文字列(公開鍵)が表示される。
	5) 公開鍵は後で必要になるため、内容(ssh-rsaからrsa-key-yyyymmddまで)をメモ帳などにコピーしておくこと。
	6) 「Save private Key」をクリックし秘密鍵を保存する。※パスワードを設定する場合、「Key passphrase」欄に入力後クリック
	7) パスワードを設定していない場合、ポップアップが表示されるが今回はなしで作成するため「はい」をクリックする。
	　 ※パスワードを設定するとGitサーバと通信時に毎回パスワード入力が必要になるため利便性と安全性どちらを重視するかで判断。
	8) 任意のフォルダに秘密鍵を保存する。※例「C:\User\username\.ssh」に「git-key.ppk」という名前で保存

//-------------------------------------------------------------------------------
//■GitHubに公開鍵を登録する
//-------------------------------------------------------------------------------
	1) GitHubのサービスにログインして、ユーザーのトップページを表示させる。
	2) ページの一番上（検索ボックスがある行）の右側にSettingsのアイコンがあるのでクリックする。
	3) ページ左側のメニューバーから「SSH keys」をクリックする。
	4) 「Add SSH key」ボタンをクリックする。
	5) title欄に任意で入力する。※rsa-key-20140930
	6) key欄に公開鍵を貼り付ける。※「■秘密鍵と公開鍵を作成する」の手順5を参照
	7)「Add key」ボタンをクリックする。	 

//-------------------------------------------------------------------------------
//■Bitbucketに公開鍵を登録する
//-------------------------------------------------------------------------------
	1) Bitbucketのサービスにログインして、ユーザーのトップページを表示させる。
	2) ページの一番上（検索ボックスがある行）のアバターアイコンからアカウントの管理をクリックする。
	3) ページ左側のメニューバーから「SSH キー」をクリックする。
	4) 「鍵を追加」ボタンをクリックする。
	5) Label欄に任意で入力する。※rsa-key-20140930
	6) key欄に公開鍵を貼り付ける。※「■SSHキーを作成する」の手順5を参照
	7)「鍵を追加」ボタンをクリックする。

//-------------------------------------------------------------------------------
//■クライアントに秘密鍵を登録する
//-------------------------------------------------------------------------------
	1) タスクトレイの「PuTTY authentication agent」で右クリックしポップアップメニューを表示する。
	2) 「View Keys」をクリックする。
	3) Pageant Key Listが表示されるので、「Add Key」ボタンをクリックする。
	4) 事前に作成した秘密鍵を選択する。
	5) 「close」ボタンをクリックし、ウィンドウを閉じる。
	6) SourceTreeの「ツール」-「オプション」をクリックする。
	7) 全般タブのSSHキー欄に秘密鍵のパスを入力する。※横の「…」ボタンからファイルを直接選択してもOK

//-------------------------------------------------------------------------------
//■GitHubにSSHでアクセスする
//-------------------------------------------------------------------------------
	1) GitHubのサービスにログインして、リポジトリを選択する。
	2) ページ右側の「HTTPS clone URL」欄の下にある青字のSSHをクリックする。
	3) 「SSH clone URL」に変更されたはずなので、URLをコピーする。
	4) SourceTreeでリポジトリを選択し、右上の「設定」ボタンをクリックする。
	5) リモートタブの「編集」ボタンをクリックする。
	6) URL/パス欄に手順3)の内容を貼り付けて「OK」ボタンをクリックする。

//-------------------------------------------------------------------------------
//■GitHub Gistで特定のユーザのGistだけを検索する
//-------------------------------------------------------------------------------
	検索ボックスに「user:*****」と入力すると"*****"のユーザーが検索できます。
	検索ボックスに「user:***** xxxxx」と入力すると、指定ユーザーのGistから"xxxxx"を検索できます。

//-------------------------------------------------------------------------------
//■「Gist（https://gist.github.com/）」とは
//-------------------------------------------------------------------------------
	GitHubの提供している断片コードの共有サービスのことです。
	下記が特徴です。

	○コードの一部（断片）を管理することができる。
		複数ファイルを統合管理しているリポジトリとは違い、
		1ファイル/1クラス/コードの一部分、などをバージョン管理できます。

	○ブログ等に簡単にコードを貼付けることができる
		通常のバージョン管理とは違いGistで管理しているコードは、
		ブログ等の他のサイトに公開することができます。

	○バージョン管理ができる

	○Forkができる
		「Fork」は、他人のコードを自分の所にコピーすることだと思えばいい。
		※食器のフォークと綴りが同じ。"枝分かれ"の意味だと解釈して問題なさそう。

	○ Gitクライアントからリモートリポジトリとして使用できる
		ゆえに、ひとつのファイルで簡潔する資料などの管理にはGistを使ってもいい。

//-------------------------------------------------------------------------------
//■参考サイト
//-------------------------------------------------------------------------------
	GitおよびGitHubは、参考サイトなども豊富な印象です。

	○サルでもわかるGit入門 -バージョン管理を使いこなそう-
	「http://www.backlog.jp/git-guide/」
	バージョン管理とはなんぞやについても説明してくれる素敵なサイトです。
	そもそも専門用語がわからん、みたいな状況から始める人も多いはず。
	そんな時にはまずここを確認してみるといいかも。
	Kindleの電子書籍も出ているようです。
	……なぜかサルが博多弁（？）なんですよね。山笠の衣装だし。
	※どうやら「ヌーラボ」さんという福岡の企業が運営しているサイトみたい。
